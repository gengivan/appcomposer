"""Add missing field in Historic

Revision ID: 24b650b60652
Revises: bfa1f94763c
Create Date: 2016-02-04 09:57:51.655017

"""

# revision identifiers, used by Alembic.
revision = '24b650b60652'
down_revision = 'bfa1f94763c'

from alembic import op
import sqlalchemy as sa
import sqlalchemy.sql as sql

from appcomposer.db import db
from appcomposer.application import app

metadata = db.MetaData()
active_translation = db.Table('ActiveTranslationMessages', metadata,
    sa.Column('history_id', sa.Integer()),
    sa.Column('category', sa.Unicode(length=255), nullable=True),
    sa.Column('fmt', sa.Unicode(length=255), nullable=True),
    sa.Column('from_developer', sa.Boolean(), nullable=True),
    sa.Column('namespace', sa.Unicode(length=255), nullable=True),
    sa.Column('position', sa.Integer(), nullable=True),
    sa.Column('same_tool', sa.Boolean(), nullable=True),
    sa.Column('tool_id', sa.Unicode(length=255), nullable=True),
)

translation_history = db.Table('TranslationMessageHistory', metadata,
    sa.Column('id', sa.Integer()),
    sa.Column('parent_translation_id', sa.Integer()),
    sa.Column('category', sa.Unicode(length=255), nullable=True),
    sa.Column('fmt', sa.Unicode(length=255), nullable=True),
    sa.Column('from_developer', sa.Boolean(), nullable=True),
    sa.Column('namespace', sa.Unicode(length=255), nullable=True),
    sa.Column('position', sa.Integer(), nullable=True),
    sa.Column('same_tool', sa.Boolean(), nullable=True),
    sa.Column('tool_id', sa.Unicode(length=255), nullable=True),
)

def upgrade():
    ### commands auto generated by Alembic - please adjust! ###
    op.add_column('TranslationMessageHistory', sa.Column('category', sa.Unicode(length=255), nullable=True))
    op.add_column('TranslationMessageHistory', sa.Column('fmt', sa.Unicode(length=255), nullable=True))
    op.add_column('TranslationMessageHistory', sa.Column('from_developer', sa.Boolean(), nullable=True))
    op.add_column('TranslationMessageHistory', sa.Column('namespace', sa.Unicode(length=255), nullable=True))
    op.add_column('TranslationMessageHistory', sa.Column('position', sa.Integer(), nullable=True))
    op.add_column('TranslationMessageHistory', sa.Column('same_tool', sa.Boolean(), nullable=True))
    op.add_column('TranslationMessageHistory', sa.Column('tool_id', sa.Unicode(length=255), nullable=True))
    op.create_index(u'ix_TranslationMessageHistory_category', 'TranslationMessageHistory', ['category'], unique=False)
    op.create_index(u'ix_TranslationMessageHistory_fmt', 'TranslationMessageHistory', ['fmt'], unique=False)
    op.create_index(u'ix_TranslationMessageHistory_from_developer', 'TranslationMessageHistory', ['from_developer'], unique=False)
    op.create_index(u'ix_TranslationMessageHistory_namespace', 'TranslationMessageHistory', ['namespace'], unique=False)
    op.create_index(u'ix_TranslationMessageHistory_position', 'TranslationMessageHistory', ['position'], unique=False)
    op.create_index(u'ix_TranslationMessageHistory_same_tool', 'TranslationMessageHistory', ['same_tool'], unique=False)
    op.create_index(u'ix_TranslationMessageHistory_tool_id', 'TranslationMessageHistory', ['tool_id'], unique=False)
    ### end Alembic commands ###
    with app.app_context():
        # Create a list of fields such as active_translation.c.history_id, ...
        FIELD_NAMES = 'category', 'fmt', 'from_developer', 'namespace', 'position', 'same_tool', 'tool_id'
        fields = []
        for field in ('history_id',) + FIELD_NAMES:
            fields.append(getattr(active_translation.c, field))

        for active_message in db.session.execute(sql.select(fields)):
            parent_id = active_message[0]
            # field_values = { 'category' :  (category), 'fmt' : (fmt), ... }
            field_values = dict(zip(FIELD_NAMES, active_message[1:]))

            while parent_id is not None:
                
                update_stmt = translation_history.update().where(translation_history.c.id == parent_id).values(**field_values)
                db.session.execute(update_stmt)

                parent_ids = db.session.execute(sql.select([ translation_history.c.parent_translation_id ], translation_history.c.id == parent_id))
                parent_ids = list(parent_ids)
                if len(parent_ids) == 0 or len(parent_ids[0]) == 0:
                    break

                parent_id = parent_ids[0][0]
        db.session.commit()

def downgrade():
    ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(u'ix_TranslationMessageHistory_tool_id', table_name='TranslationMessageHistory')
    op.drop_index(u'ix_TranslationMessageHistory_same_tool', table_name='TranslationMessageHistory')
    op.drop_index(u'ix_TranslationMessageHistory_position', table_name='TranslationMessageHistory')
    op.drop_index(u'ix_TranslationMessageHistory_namespace', table_name='TranslationMessageHistory')
    op.drop_index(u'ix_TranslationMessageHistory_from_developer', table_name='TranslationMessageHistory')
    op.drop_index(u'ix_TranslationMessageHistory_fmt', table_name='TranslationMessageHistory')
    op.drop_index(u'ix_TranslationMessageHistory_category', table_name='TranslationMessageHistory')
    op.drop_column('TranslationMessageHistory', 'tool_id')
    op.drop_column('TranslationMessageHistory', 'same_tool')
    op.drop_column('TranslationMessageHistory', 'position')
    op.drop_column('TranslationMessageHistory', 'namespace')
    op.drop_column('TranslationMessageHistory', 'from_developer')
    op.drop_column('TranslationMessageHistory', 'fmt')
    op.drop_column('TranslationMessageHistory', 'category')
    ### end Alembic commands ###
