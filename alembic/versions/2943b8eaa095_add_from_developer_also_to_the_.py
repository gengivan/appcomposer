"""Add from_developer also to the ActiveMessageTranslation

Revision ID: 2943b8eaa095
Revises: 435d360d3398
Create Date: 2015-05-04 18:59:24.113378

"""

# revision identifiers, used by Alembic.
revision = '2943b8eaa095'
down_revision = '435d360d3398'

from alembic import op
import sqlalchemy as sa
import sqlalchemy.sql as sql

from appcomposer.db import db
from appcomposer.application import app

metadata = db.MetaData()
active_translation = db.Table('ActiveTranslationMessages', metadata,
    db.Column('id', db.Integer()),
    db.Column('bundle_id', db.Integer),
    db.Column('taken_from_default', db.Boolean),
    db.Column('from_developer', db.Boolean),
    db.Column('key', db.Unicode(255)),
    db.Column('value', db.UnicodeText()),
)
bundle = db.Table('TranslationBundles', metadata,
    db.Column('id', db.Integer()),
    db.Column('from_developer', db.Boolean),
    db.Column('translation_url_id', db.Integer),
    db.Column('language', db.Unicode(20)),
    db.Column('target', db.Unicode(20)),
)


def upgrade():
    ### commands auto generated by Alembic - please adjust! ###
    op.add_column('ActiveTranslationMessages', sa.Column('from_developer', sa.Boolean(), nullable=True))
    op.create_index(u'ix_ActiveTranslationMessages_from_developer', 'ActiveTranslationMessages', ['from_developer'], unique=False)
    ### end Alembic commands ###

    update_stmt = active_translation.update().where(active_translation.c.value == None).values(value = "")
    with app.app_context():
        db.session.execute(update_stmt)

    active_translations = {
        # bundle_id : {
            # key : value,
        # }
    }
    # 15256
    with app.app_context():
        for key, value, bundle_id in db.session.execute(sql.select([active_translation.c.key, active_translation.c.value, active_translation.c.bundle_id])):
            if bundle_id not in active_translations:
                active_translations[bundle_id] = {}
            active_translations[bundle_id][key] = value

        default_bundle_ids = {
            # translation_url_id : bundle_id # pointing to English
        }

        for bundle_id, translation_url_id, target in db.session.execute(sql.select([bundle.c.id, bundle.c.translation_url_id, bundle.c.target], bundle.c.language == 'en_ALL')):
            default_bundle_ids[translation_url_id] = bundle_id

        active_translation_query = sql.select([active_translation.c.id, active_translation.c.taken_from_default, bundle.c.from_developer, bundle.c.translation_url_id, bundle.c.id, active_translation.c.key, active_translation.c.value], active_translation.c.bundle_id == bundle.c.id, use_labels = True)

        for row in db.session.execute(active_translation_query):
            active_msg_id = row[active_translation.c.id]
            from_default = row[active_translation.c.taken_from_default]
            bundle_from_developer = row[bundle.c.from_developer]
            bundle_id = row[bundle.c.id]
            translation_url_id = row[bundle.c.translation_url_id]
            current_value = row[active_translation.c.value]
            current_key = row[active_translation.c.key]
            
            default_bundle_id = default_bundle_ids.get(translation_url_id)
            default_value = active_translations.get(default_bundle_id, {}).get(current_key)

            if bundle_id == default_bundle_id:
                from_developer = True
            else:
                if bundle_from_developer and not from_default:
                    if default_value is not None and current_value != default_value and current_value:
                        from_developer = True
                    else:
                        from_developer = False
                        from_default = True
                else:
                    from_developer = False

            update_stmt = active_translation.update().where(active_translation.c.id == active_msg_id).values(from_developer = from_developer, taken_from_default = from_default)
            db.session.execute(update_stmt)

        db.session.commit()


def downgrade():
    ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(u'ix_ActiveTranslationMessages_from_developer', table_name='ActiveTranslationMessages')
    op.drop_column('ActiveTranslationMessages', 'from_developer')
    ### end Alembic commands ###
